apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
  namespace: gromo
  labels:
    app: mongodb
    tier: database
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
        tier: database
    spec:
      containers:
      - name: mongodb
        image: mongo:6.0
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: "gromo"
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongodb-secret
              key: password
        - name: MONGO_INITDB_DATABASE
          value: "gromo"
        volumeMounts:
        - name: mongodb-persistent-storage
          mountPath: /data/db
        - name: mongodb-init
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - mongo
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - mongo
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: mongodb-persistent-storage
        persistentVolumeClaim:
          claimName: mongodb-pvc
      - name: mongodb-init
        configMap:
          name: mongodb-init-script
---
apiVersion: v1
kind: Secret
metadata:
  name: mongodb-secret
  namespace: gromo
type: Opaque
stringData:
  password: "your-mongodb-password-here"
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-service
  namespace: gromo
  labels:
    app: mongodb
    tier: database
spec:
  type: ClusterIP
  ports:
  - port: 27017
    targetPort: 27017
  selector:
    app: mongodb
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb-pvc
  namespace: gromo
  labels:
    app: mongodb
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: ssd
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-init-script
  namespace: gromo
data:
  init-mongo.js: |
    db = db.getSiblingDB('gromo');
    
    // Create collections
    db.createCollection('users');
    db.createCollection('claims');
    db.createCollection('apikeys');
    db.createCollection('migrations');
    
    // Create indexes
    db.users.createIndex({ "email": 1 }, { unique: true });
    db.users.createIndex({ "phone": 1 }, { unique: true });
    db.users.createIndex({ "role": 1 });
    db.users.createIndex({ "isActive": 1 });
    
    db.claims.createIndex({ "claimNumber": 1 }, { unique: true });
    db.claims.createIndex({ "user": 1 });
    db.claims.createIndex({ "status": 1 });
    db.claims.createIndex({ "type": 1 });
    db.claims.createIndex({ "createdAt": 1 });
    db.claims.createIndex({ "incidentDate": 1 });
    
    db.apikeys.createIndex({ "keyId": 1 }, { unique: true });
    db.apikeys.createIndex({ "isActive": 1 });
    db.apikeys.createIndex({ "expiresAt": 1 });
    
    print("Database initialization completed");
